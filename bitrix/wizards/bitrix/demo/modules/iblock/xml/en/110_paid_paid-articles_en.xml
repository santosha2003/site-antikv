<?xml version="1.0" encoding="ISO-8859-1"?>
<CommerceInformation SchemaVersion="2.021" CreationDate="2008-06-06T16:20:10">
	<Metadata>
		<Id>paid-articles</Id>
		<Title>Paid Articles</Title>
		<Properties>
			<Property>
				<Id>CML2_CODE</Id>
				<Title>Code</Title>
				<Multiple>false</Multiple>
			</Property>
			<Property>
				<Id>CML2_SORT</Id>
				<Title>Sort</Title>
				<Multiple>false</Multiple>
			</Property>
			<Property>
				<Id>CML2_ACTIVE_FROM</Id>
				<Title>Start time</Title>
				<Multiple>false</Multiple>
			</Property>
			<Property>
				<Id>CML2_ACTIVE_TO</Id>
				<Title>End time</Title>
				<Multiple>false</Multiple>
			</Property>
			<Property>
				<Id>CML2_PREVIEW_TEXT</Id>
				<Title>Anons</Title>
				<Multiple>false</Multiple>
			</Property>
			<Property>
				<Id>CML2_PREVIEW_PICTURE</Id>
				<Title>Preview picture</Title>
				<Multiple>false</Multiple>
			</Property>
			<Property>
				<Id>136</Id>
				<Title>Author</Title>
				<Multiple>false</Multiple>
				<BitrixSort>100</BitrixSort>
				<BitrixCode>AUTHOR</BitrixCode>
				<BitrixDefaultValue></BitrixDefaultValue>
				<BitrixPropertyType>S</BitrixPropertyType>
				<BitrixRows>1</BitrixRows>
				<BitrixColumns>30</BitrixColumns>
				<BitrixListType>L</BitrixListType>
				<BitrixFileType>jpg, gif, bmp, png, jpeg</BitrixFileType>
				<BitrixNumberOfInputs>5</BitrixNumberOfInputs>
				<BitrixLinkedInformationBlock></BitrixLinkedInformationBlock>
				<BitrixWithDescription>false</BitrixWithDescription>
				<BitrixUsedInSearch>false</BitrixUsedInSearch>
				<BitrixFilterAllowed>false</BitrixFilterAllowed>
				<BitrixUserType></BitrixUserType>
			</Property>
		</Properties>
	</Metadata>
	<Catalog>
		<Id>paid-articles</Id>
		<MetadataId>paid-articles</MetadataId>
		<Title>Paid Articles</Title>
		<BitrixCode>paid_articles</BitrixCode>
		<BitrixSort>1100</BitrixSort>
		<BitrixListURL>/e-store/paid/</BitrixListURL>
		<BitrixDetailURL>/e-store/paid/detail.php?ID=#ID#</BitrixDetailURL>
		<BitrixSectionURL></BitrixSectionURL>
		<BitrixPicture></BitrixPicture>
		<BitrixIndexElements>true</BitrixIndexElements>
		<BitrixIndexSections>false</BitrixIndexSections>
		<BitrixWorkflow>true</BitrixWorkflow>
		<BitrixLabels>
			<BitrixLabel>
				<Id>ELEMENT_NAME</Id>
				<Value>Article</Value>
			</BitrixLabel>
			<BitrixLabel>
				<Id>ELEMENTS_NAME</Id>
				<Value>Articles</Value>
			</BitrixLabel>
			<BitrixLabel>
				<Id>ELEMENT_ADD</Id>
				<Value>Add new article</Value>
			</BitrixLabel>
			<BitrixLabel>
				<Id>ELEMENT_EDIT</Id>
				<Value>Edit article</Value>
			</BitrixLabel>
			<BitrixLabel>
				<Id>ELEMENT_DELETE</Id>
				<Value>Delete article</Value>
			</BitrixLabel>
			<BitrixLabel>
				<Id>SECTION_NAME</Id>
				<Value>Section</Value>
			</BitrixLabel>
			<BitrixLabel>
				<Id>SECTIONS_NAME</Id>
				<Value>Sections</Value>
			</BitrixLabel>
			<BitrixLabel>
				<Id>SECTION_ADD</Id>
				<Value>Add new section</Value>
			</BitrixLabel>
			<BitrixLabel>
				<Id>SECTION_EDIT</Id>
				<Value>Edit section</Value>
			</BitrixLabel>
			<BitrixLabel>
				<Id>SECTION_DELETE</Id>
				<Value>Delete section</Value>
			</BitrixLabel>
		</BitrixLabels>
		<Elements>
			<Element>
				<Id>1332</Id>
				<Title>Selling content</Title>
				<BitrixTags></BitrixTags>
				<Description>&lt;p&gt;The content selling technology is built upon the access permission assignment which is the basic principle of Bitrix Site Manager. Each user group is granted a unique set of permissions allowing their members to obtain access to the specific piece of information. When visitors buy a specific information, they are added to a list of members allowed to access the purchased content.&lt;/p&gt;

&lt;p&gt;Hence, the content selling process comes to selling the user group access permissions. Access permissions may be sold for a definite period of time (subscription) as well as without time restriction.&lt;/p&gt;

&lt;p&gt;Generally, the content selling process involves the following actions:&lt;/p&gt;

&lt;ul type=&quot;square&quot;&gt;
  &lt;li&gt;creating a user group allowed to access the required information resources; &lt;/li&gt;

  &lt;li&gt;enabling the user group access permissions to be sold; &lt;/li&gt;

  &lt;li&gt;creating and customizing a commercial catalogue to be used for content selling; &lt;/li&gt;

  &lt;li&gt;setting up the e-store; &lt;/li&gt;

  &lt;li&gt;publishing the content to be sold; &lt;/li&gt;

  &lt;li&gt;receiving and processing orders. &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;As an example, we are going to sell subscription for articles. The starting point will be creating the &lt;b&gt;Subscribers &lt;/b&gt;user group. You can do this in the &lt;b&gt;User Groups &lt;/b&gt;form (&lt;i&gt;Settings &lt;/i&gt;-&amp;gt; &lt;i&gt;Manage users &lt;/i&gt;-&amp;gt; &lt;i&gt;User groups&lt;/i&gt;).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/user_gr_par_sm.png&quot; height=&quot;310&quot; width=&quot;350&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Click the &lt;b&gt;Access &lt;/b&gt;tab, where you can assign permissions of the created user group to access the administration part of the system modules. Since members of the Subscribers group should have access to information of the public section only, leave the default setting.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/access_sm.png&quot; height=&quot;378&quot; width=&quot;350&quot;/&gt;&lt;/p&gt;
&lt;BREAK /&gt;
&lt;p&gt;Create an information block whose content we are going to sell:&lt;/p&gt;


&lt;p&gt;&lt;img src=&quot;images/iblock_sm.png&quot; height=&quot;298&quot; width=&quot;350&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Please note that here we define the site section in which the article view pages will be stored: &lt;b&gt;/e-store/paid/&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;Add elements to the created information block (&lt;b&gt;Paid Articles&lt;/b&gt;):&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;images/elements_sm.png&quot; height=&quot;60&quot; width=&quot;350&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Create another information block whose elements will act as products. We shall use this information block to sell content.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;images/iblock2_sm.png&quot; height=&quot;268&quot; width=&quot;350&quot;/&gt;&lt;/p&gt;

&lt;p&gt;To make elements of this information block act as &amp;quot;sellable&amp;quot; products, enable the corresponding options (&lt;b&gt;Is commercial catalog &lt;/b&gt;and &lt;b&gt;Content selling&lt;/b&gt;)&lt;b&gt; &lt;/b&gt;in the &lt;b&gt;Catalogs &lt;/b&gt;tab of the &lt;b&gt;Commercial catalog&lt;/b&gt; module settings.&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;images/set_catalog_sm.png&quot; height=&quot;299&quot; width=&quot;350&quot;/&gt;&lt;/p&gt;

&lt;p&gt;Finally, on the &lt;b&gt;Permission Selling&lt;/b&gt; tab, mark the user group whose members should have access to the paid content. In our case, we are going to sell permissions of the &lt;b&gt;Subscribers &lt;/b&gt;group:&lt;/p&gt;

&lt;p&gt;
&lt;img src=&quot;images/set_subscriber_sm.png&quot; height=&quot;266&quot; width=&quot;350&quot;/&gt;&lt;/p&gt;
</Description>
				<PropertiesValues>
					<PropertyValues>
						<Id>CML2_CODE</Id>
						<Value></Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_SORT</Id>
						<Value>500</Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_ACTIVE_FROM</Id>
						<Value></Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_ACTIVE_TO</Id>
						<Value></Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_PREVIEW_TEXT</Id>
						<Value>The content selling technology is built upon the access permission assignment which is the basic principle of Bitrix Site Manager.</Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_PREVIEW_PICTURE</Id>
						<Value></Value>
					</PropertyValues>
					<PropertyValues>
						<Id>136</Id>
					</PropertyValues>
				</PropertiesValues>
			</Element>
			<Element>
				<Id>1333</Id>
				<Title>Why do sites die?</Title>
				<BitrixTags></BitrixTags>
				<Description>&lt;p&gt;&lt;b&gt;Unstable Systems&lt;/b&gt;&lt;/p&gt;

&lt;p&gt;Any software solution, application or
network system are developed to run under a definite load. We never wonder
looking, say, at a tyre and seeing figures of admissible load level recommended
by a producer. But with software and hardware solutions, such attitude is very
rare.&lt;/p&gt;

&lt;p&gt;Customers almost never perform the server
load test-drive before launching the project to determine the maximum
affordable site traffic. Companies always forget that tests help reveal errors
and weak points, which would improve the server performance significantly.&lt;/p&gt;

&lt;p&gt;There can be various reasons that can cause failures or
denials during the server load test-drive or the real peak loads. Just to name
a few:&lt;/p&gt;

&lt;ol&gt;
 &lt;li&gt;&lt;b&gt;Insufficient
     RAM for well balanced simultaneous run of processes&lt;/b&gt; of a web server and database. Most systems run a separate web
     server process to process a client request. Usually, an Apache web server
     process with a PHP module and an application weights about 20 to 30 megabytes.
     At peak load time, a lot of parallel processes can run simultaneously
     (sometimes hundreds of processes). It is obvious that the system will swap
     memory space of the processes when RAM is exhausted, which leads to
     dramatic degradation of the database and system performance. &lt;/li&gt;
 &lt;li&gt;&lt;b&gt;Insufficient
     processor capacity&lt;/b&gt; for multitasking and
     ensuring the adequate response time. This situation may occur if the
     server undergoes great many simultaneous requests exceeding the processor
     resources. Even if the RAM size is not an issue, you can find the system
     to stop responding in proper time, page execution time to increase many
     times more, the database to overload with many requests. All these factors
     will make your server unavailable to all visitors.&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;Insufficient
     database performance at concurrent requests&lt;/b&gt;,
     impossibility to use server resources fully. This situation is usual with
     MySQL. This database engine usually uses MyISAM tables. This format,
     though very simple and effective, will be unable to serve a cascade of
     requests and become the weakest point in the system. Data insertion,
     updates and some other operations requires that tables to be exclusively
     locked, making all requests to be executed sequentially, not in parallel.
     As a result, the page execution time becomes more and more long. To
     overcome this, you can use Oracle, MSSQL or MySQL+InnoDB databases.&lt;/li&gt;
 &lt;li&gt;&lt;b&gt;Overall
     system imbalance at peak load and rapid regression of performance&lt;/b&gt;, even at minor stresses. At peak load, the whole system
     undergoes congestions. In addition to the above mentioned challenges, disk
     subsystem may fail. All these factors can accumulate; degradation of
     performance in one area affects others - just like a snowball.&lt;/li&gt;
&lt;/ol&gt;

&lt;BREAK /&gt;

&lt;h4&gt;&lt;b&gt;RAM: large processes&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;As mentioned before, most servers run a separate web server
process to process a client request, each taking 20 to 30 megabytes of memory.
10 processes will make 200 to 300 megabytes which is normal and comfort
environment condition, but 100 client requests will cause heavy memory swapping
on a 1GB machine.&lt;/p&gt;

&lt;p&gt;Practice shows that low memory is the key factor of
instability at peak load levels.&lt;/p&gt;

&lt;p&gt;Another thing to mention is that the same configuration of
a web server processes all requests of PHP pages, images, binary files, CSS or
other files. A page can contain up to several hundreds of images! But remember
that a web server process eats 20 to 30 megabytes of memory. If a web server
processes requests for static files, it does not call the PHP interpreter, thus
spending 90% of the time for static files.&lt;/p&gt;

&lt;p&gt;The problem of effective handling of static files is
extremely essential. You must try to reduce the number of static file requests
to a minimum.&lt;/p&gt;

&lt;BREAK /&gt;
&lt;h4&gt;&lt;b&gt;RAM: slow connections&lt;/b&gt;&lt;/h4&gt;

&lt;p&gt;Another problem are clients' slow Internet connections. The
problem is seemingly null, but it is far from true. For example, your web
server can generate a page in 0.01 sec., but the transfer to a client can take
5 to 50 seconds or more.&lt;/p&gt;

&lt;p&gt;During page transfer, an almost idle instance of Apache web
server will run that will wait for the transfer process to complete. It will
consume about 30 megabytes of memory, almost idle! Administrators almost never
realize how important this factor is for the system performance&lt;/p&gt;

&lt;p&gt;Let us make a simple calculation. Consider two systems: A
and B. In the system A, a page would execute in 0.1 seconds and the transfer
time would be a bare 5 seconds (it is always more in the real life). In the
system B, a page would execute in the same 0.1 seconds but assume the transfer
time to be 0 (zero) seconds.&lt;/p&gt;

&lt;p&gt;Presume that each server receives 100 requests per second.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;System A&lt;/b&gt;. Processing 100
requests per second requires running 100 separate web server instances
simultaneously! But why? The answer is trivial. Even having processed a request
in 0.1 seconds, a process cannot terminate. It will wait until a client has
successfully received the page. Each second the server receives 100 requests
and runs 100 more processes. Consequently, after 5 seconds the server will be
running 500 processes! And only after that moment the processes that were run
first will begin to terminate. Thus, the system A will always run 500 processes
which will require at least 10GB of memory. The most important and amazing
thing is that boosting the page generation time to 0.001 seconds will not help
to increase performance because processes wait for the transfer to finish. In
other words, &lt;b&gt;the system A performance is in no way connected with the PHP or
system performance&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;&lt;b&gt;System B&lt;/b&gt;. The server
receives 100 requests. Processing 100 requests requires only 10 web server
processes to be running simultaneously! Why? The process handles a single
request in 0.1 sec. But we have assumed that the transfer time is zero (or
negligibly small). In other words, handling 100 requests per second will
require only 200 megabytes of memory! But the most important thing is that
reducing the page execution time to 0.01 sec. will increase system performance
10 times. &lt;b&gt;The system A performance depends only on the performance of PHP
and the system&lt;/b&gt;.&lt;/p&gt;

&lt;p&gt;This vivid example
illustrates how really important is the impact of quality of client connection
on the overall system performance. The web server consumes RAM ineffectively
when it serves requests from slow connections.&lt;/p&gt;
</Description>
				<PropertiesValues>
					<PropertyValues>
						<Id>CML2_CODE</Id>
						<Value></Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_SORT</Id>
						<Value>500</Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_ACTIVE_FROM</Id>
						<Value></Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_ACTIVE_TO</Id>
						<Value></Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_PREVIEW_TEXT</Id>
						<Value>There can be various reasons that can cause failures or
denials during the server load test-drive or the real peak loads.
</Value>
					</PropertyValues>
					<PropertyValues>
						<Id>CML2_PREVIEW_PICTURE</Id>
						<Value></Value>
					</PropertyValues>
					<PropertyValues>
						<Id>136</Id>
					</PropertyValues>
				</PropertiesValues>
			</Element>
		</Elements>
	</Catalog>
</CommerceInformation>
